Total: 9.28MB
ROUTINE ======================== runtime.(*timer).reset in /opt/homebrew/Cellar/go/1.24.3/libexec/src/runtime/time.go
         0        1MB (flat, cum) 10.78% of Total
         .          .    705:func (t *timer) reset(when, period int64) bool {
         .        1MB    706:	return t.modify(when, period, nil, nil, 0)
         .          .    707:}
         .          .    708:
         .          .    709:// cleanHead cleans up the head of the timer queue. This speeds up
         .          .    710:// programs that create and delete timers; leaving them in the heap
         .          .    711:// slows down heap operations.
ROUTINE ======================== runtime.resetForSleep in /opt/homebrew/Cellar/go/1.24.3/libexec/src/runtime/time.go
         0        1MB (flat, cum) 10.78% of Total
         .          .    346:func resetForSleep(gp *g, _ unsafe.Pointer) bool {
         .        1MB    347:	gp.timer.reset(gp.sleepWhen, 0)
         .          .    348:	return true
         .          .    349:}
         .          .    350:
         .          .    351:// A timeTimer is a runtime-allocated time.Timer or time.Ticker
         .          .    352:// with the additional runtime state following it.
ROUTINE ======================== runtime.resetspinning in /opt/homebrew/Cellar/go/1.24.3/libexec/src/runtime/proc.go
         0     1.50MB (flat, cum) 16.20% of Total
         .          .   3872:func resetspinning() {
         .          .   3873:	gp := getg()
         .          .   3874:	if !gp.m.spinning {
         .          .   3875:		throw("resetspinning: not a spinning m")
         .          .   3876:	}
         .          .   3877:	gp.m.spinning = false
         .          .   3878:	nmspinning := sched.nmspinning.Add(-1)
         .          .   3879:	if nmspinning < 0 {
         .          .   3880:		throw("findrunnable: negative nmspinning")
         .          .   3881:	}
         .          .   3882:	// M wakeup policy is deliberately somewhat conservative, so check if we
         .          .   3883:	// need to wakeup another P here. See "Worker thread parking/unparking"
         .          .   3884:	// comment at the top of the file for details.
         .     1.50MB   3885:	wakep()
         .          .   3886:}
         .          .   3887:
         .          .   3888:// injectglist adds each runnable G on the list to some run queue,
         .          .   3889:// and clears glist. If there is no current P, they are added to the
         .          .   3890:// global queue, and up to npidle M's are started to run them.
