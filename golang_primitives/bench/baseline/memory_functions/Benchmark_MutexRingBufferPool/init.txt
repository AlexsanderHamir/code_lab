Total: 9.28MB
ROUTINE ======================== compress/flate.(*compressor).init in /opt/homebrew/Cellar/go/1.24.3/libexec/src/compress/flate/deflate.go
    1.17MB     1.17MB (flat, cum) 12.58% of Total
         .          .    569:func (d *compressor) init(w io.Writer, level int) (err error) {
         .          .    570:	d.w = newHuffmanBitWriter(w)
         .          .    571:
         .          .    572:	switch {
         .          .    573:	case level == NoCompression:
         .          .    574:		d.window = make([]byte, maxStoreBlockSize)
         .          .    575:		d.fill = (*compressor).fillStore
         .          .    576:		d.step = (*compressor).store
         .          .    577:	case level == HuffmanOnly:
         .          .    578:		d.window = make([]byte, maxStoreBlockSize)
         .          .    579:		d.fill = (*compressor).fillStore
         .          .    580:		d.step = (*compressor).storeHuff
         .          .    581:	case level == BestSpeed:
         .          .    582:		d.compressionLevel = levels[level]
  544.67kB   544.67kB    583:		d.window = make([]byte, maxStoreBlockSize)
         .          .    584:		d.fill = (*compressor).fillStore
         .          .    585:		d.step = (*compressor).encSpeed
         .          .    586:		d.bestSpeed = newDeflateFast()
  650.62kB   650.62kB    587:		d.tokens = make([]token, maxStoreBlockSize)
         .          .    588:	case level == DefaultCompression:
         .          .    589:		level = 6
         .          .    590:		fallthrough
         .          .    591:	case 2 <= level && level <= 9:
         .          .    592:		d.compressionLevel = levels[level]
ROUTINE ======================== primitives_performance.init.func1 in /Users/alexsandergomes/Documents/experiments/golang_primitives/helpers.go
       1MB        1MB (flat, cum) 10.78% of Total
         .          .    448:var testAllocator = func() *testObject {
       1MB        1MB    449:	return &testObject{
         .          .    450:		ID:   0,
         .          .    451:		Data: "test",
         .          .    452:	}
         .          .    453:}
         .          .    454:
ROUTINE ======================== runtime.(*scavengerState).init in /opt/homebrew/Cellar/go/1.24.3/libexec/src/runtime/mgcscavenge.go
  512.05kB   512.05kB (flat, cum)  5.39% of Total
         .          .    356:func (s *scavengerState) init() {
         .          .    357:	if s.g != nil {
         .          .    358:		throw("scavenger state is already wired")
         .          .    359:	}
         .          .    360:	lockInit(&s.lock, lockRankScavenge)
         .          .    361:	s.g = getg()
         .          .    362:
  512.05kB   512.05kB    363:	s.timer = new(timer)
         .          .    364:	f := func(s any, _ uintptr, _ int64) {
         .          .    365:		s.(*scavengerState).wake()
         .          .    366:	}
         .          .    367:	s.timer.init(f, s)
         .          .    368:
