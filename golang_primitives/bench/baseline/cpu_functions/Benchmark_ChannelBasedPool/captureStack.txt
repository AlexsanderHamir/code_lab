Total: 30.68s
ROUTINE ======================== runtime.(*mLockProfile).captureStack in /opt/homebrew/Cellar/go/1.24.3/libexec/src/runtime/mprof.go
      10ms       10ms (flat, cum) 0.033% of Total
         .          .    781:func (prof *mLockProfile) captureStack() {
         .          .    782:	if debug.profstackdepth == 0 {
         .          .    783:		// profstackdepth is set to 0 by the user, so mp.profStack is nil and we
         .          .    784:		// can't record a stack trace.
         .          .    785:		return
         .          .    786:	}
         .          .    787:
         .          .    788:	skip := 3 // runtime.(*mLockProfile).recordUnlock runtime.unlock2 runtime.unlockWithRank
         .          .    789:	if staticLockRanking {
         .          .    790:		// When static lock ranking is enabled, we'll always be on the system
         .          .    791:		// stack at this point. There will be a runtime.unlockWithRank.func1
         .          .    792:		// frame, and if the call to runtime.unlock took place on a user stack
         .          .    793:		// then there'll also be a runtime.systemstack frame. To keep stack
         .          .    794:		// traces somewhat consistent whether or not static lock ranking is
         .          .    795:		// enabled, we'd like to skip those. But it's hard to tell how long
         .          .    796:		// we've been on the system stack so accept an extra frame in that case,
         .          .    797:		// with a leaf of "runtime.unlockWithRank runtime.unlock" instead of
         .          .    798:		// "runtime.unlock".
         .          .    799:		skip += 1 // runtime.unlockWithRank.func1
         .          .    800:	}
         .          .    801:	prof.pending = 0
         .          .    802:	prof.haveStack = true
         .          .    803:
         .          .    804:	prof.stack[0] = logicalStackSentinel
         .          .    805:	if debug.runtimeContentionStacks.Load() == 0 {
      10ms       10ms    806:		prof.stack[1] = abi.FuncPCABIInternal(_LostContendedRuntimeLock) + sys.PCQuantum
         .          .    807:		prof.stack[2] = 0
         .          .    808:		return
         .          .    809:	}
         .          .    810:
         .          .    811:	var nstk int
