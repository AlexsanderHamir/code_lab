Total: 48.01s
ROUTINE ======================== runtime.runqsteal in /opt/homebrew/Cellar/go/1.24.3/libexec/src/runtime/proc.go
      30ms     14.16s (flat, cum) 29.49% of Total
      10ms       10ms   6989:func runqsteal(pp, p2 *p, stealRunNextG bool) *g {
         .          .   6990:	t := pp.runqtail
         .     14.13s   6991:	n := runqgrab(p2, &pp.runq, t, stealRunNextG)
      10ms       10ms   6992:	if n == 0 {
         .          .   6993:		return nil
         .          .   6994:	}
         .          .   6995:	n--
         .          .   6996:	gp := pp.runq[(t+n)%uint32(len(pp.runq))].ptr()
         .          .   6997:	if n == 0 {
      10ms       10ms   6998:		return gp
         .          .   6999:	}
         .          .   7000:	h := atomic.LoadAcq(&pp.runqhead) // load-acquire, synchronize with consumers
         .          .   7001:	if t-h+n >= uint32(len(pp.runq)) {
         .          .   7002:		throw("runqsteal: runq overflow")
         .          .   7003:	}
