Total: 26.57s
ROUTINE ======================== testing.(*B).run1.func1 in /opt/homebrew/Cellar/go/1.24.3/libexec/src/testing/benchmark.go
         0    17.08us (flat, cum) 6.4e-05% of Total
         .          .    238:	go func() {
         .          .    239:		// Signal that we're done whether we return normally
         .          .    240:		// or by FailNow's runtime.Goexit.
         .          .    241:		defer func() {
         .          .    242:			b.signal <- true
         .          .    243:		}()
         .          .    244:
         .    17.08us    245:		b.runN(1)
         .          .    246:	}()
         .          .    247:	<-b.signal
         .          .    248:	if b.failed {
         .          .    249:		fmt.Fprintf(b.w, "%s--- FAIL: %s\n%s", b.chatty.prefix(), b.name, b.output)
         .          .    250:		return false
ROUTINE ======================== testing.(*M).after.func1 in /opt/homebrew/Cellar/go/1.24.3/libexec/src/testing/testing.go
         0      181ms (flat, cum)  0.68% of Total
         .          .   2366:	m.afterOnce.Do(func() {
         .      181ms   2367:		m.writeProfiles()
         .          .   2368:	})
         .          .   2369:
         .          .   2370:	// Restore PanicOnExit0 after every run, because we set it to true before
         .          .   2371:	// every run. Otherwise, if m.Run is called multiple times the behavior of
         .          .   2372:	// os.Exit(0) will not be restored after the second run.
ROUTINE ======================== testing.runBenchmarks.func1 in /opt/homebrew/Cellar/go/1.24.3/libexec/src/testing/benchmark.go
         0     13.20s (flat, cum) 49.69% of Total
         .          .    706:		benchFunc: func(b *B) {
         .          .    707:			for _, Benchmark := range bs {
         .     13.20s    708:				b.Run(Benchmark.Name, Benchmark.F)
         .          .    709:			}
         .          .    710:		},
         .          .    711:		benchTime: benchTime,
         .          .    712:		bstate:    bstate,
         .          .    713:	}
